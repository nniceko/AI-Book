import tensorflow as tf
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

#MNIST 데이터셋을 로드하여 준비. 샘플 값을 정수에서 부동소수로 변환

(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()

import matplotlib.pylab as plt

plt.figure(figsize=(6, 1))
for i in range(36):
    plt.subplot(3, 12, i+1)
    plt.imshow(train_images[i], cmap="gray")
    plt.axis("off")
plt.show()

train_images = train_images.reshape((60000, 28*28))
test_images = test_images.reshape((10000, 28*28))
train_images, test_images = train_images / 255.0, test_images / 255.0

print(train_labels[:10])

from tensorflow.keras.utils import to_categorical

one_hot_train_labels = to_categorical(train_labels, 10)
one_hot_test_labels = to_categorical(test_labels, 10)
print(one_hot_train_labels[:10])

#층을 차례대로 쌓아 tf.keras.Sequential 모델을 만든다.. 
#훈련에 사용할 옵티마이저(optimizer)와 손실 함수를 선택:
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Dense(input_dim=784, units=128, activation='relu'))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.Dense(units=10, activation='softmax'))

model.compile(optimizer=tf.optimizers.Adam(learning_rate=0.01), loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()
history = model.fit(train_images, one_hot_train_labels, epochs=5, batch_size=10)

plt.figure(figsize=(12, 4)) #그래프의 가로세로 비율
plt.subplot(1, 1, 1) #1행1열의 첫 번째 위치
plt.plot(history.history['loss'], 'b--', label='loss') #loss는 파란색 점선
plt.plot(history.history['accuracy'], 'g-', label='Accuracy') #accuracy는 녹색실선
plt.xlabel('Epoch')
plt.legend()
plt.show()
print('최적화 완료!')

print("\n=============test results==========")
labels=model.predict(test_images)
# verbose=2로 설정하여 진행 막대(progress bar)가 나오지 않도록 설정한다.
print("\n Accuracy: %.4f" % (model.evaluate(test_images, one_hot_test_labels, verbose=2)[1])) #list index

fig = plt.figure()
for i in range(10):
    subplot = fig.add_subplot(2, 5, i+1)
    subplot.set_xticks([]) #x축 부 눈금을 제거([])
    subplot.set_yticks([]) #y축 부 눈금을 제거([])
    subplot.set_title('%d' % np.argmax(labels[i]))
    subplot.imshow(test_images[i].reshape((28, 28)),
                   cmap=plt.cm.gray_r)
plt.show()

print("===================================")
